import fs from 'fs';
import path from 'path';

const ROOT = process.cwd();
const networksDir = path.join(ROOT, 'src', 'networks');
const coreDir = path.join(ROOT, 'src', 'core');

function getDirectories(source) {
  return fs
    .readdirSync(source, { withFileTypes: true })
    .filter((dirent) => dirent.isDirectory())
    .map((dirent) => dirent.name)
    .sort();
}

function ensureDir(dirPath) {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
  }
}

function generateNetworkIdsFile(networks) {
  const union = networks.map((n) => `'${n}'`).join(' | ') || 'never';
  const arr = networks.map((n) => `'${n}'`).join(', ');
  const content = `// Auto-generated by scripts/generateNetworkTypes.mjs
export type NetworkId = ${union};
export const NETWORK_IDS = [${arr}] as const;
`;
  const outPath = path.join(coreDir, 'networkIds.ts');
  fs.writeFileSync(outPath, content);
  return outPath;
}

function generateRegistryFile(networks) {
  const entries = networks
    .map(
      (n) => `  ${n}: async () => await import("../networks/${n}"),`
    )
    .join('\n');
  const content = `// Auto-generated by scripts/generateNetworkTypes.mjs
export const networkRegistry = {
${entries}
};
`;
  const outPath = path.join(coreDir, 'registry.ts');
  fs.writeFileSync(outPath, content);
  return outPath;
}

function main() {
  ensureDir(coreDir);
  if (!fs.existsSync(networksDir)) {
    throw new Error(`Networks directory not found: ${networksDir}`);
  }
  const networks = getDirectories(networksDir);
  const idsPath = generateNetworkIdsFile(networks);
  const regPath = generateRegistryFile(networks);
  console.log(`Generated network IDs at: ${idsPath}`);
  console.log(`Generated registry at: ${regPath}`);
}

main();

